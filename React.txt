＝＝＝＝＝＝＝JavaScriptのフレームワーク＝＝＝＝＝＝＝＝＝＝

1. React
JavaScriptを用いたWebサイト上のUIを構築するためのライブラリ。
どのようなWebアプリケーションにも導入可能
新機能追加もコード書き換えが必要なく、容易

2. Angular
Webアプリ開発に必要なほとんどの機能をサポート

３. Vue
オープンソース
学習コストが低い

4. jQuery
ブラウザの種類に影響されづらい

5. Backbone
MVCを採用（Model, View, Controller）
自由度が高い

・Next.jsとはReactをベースに開発されたフロントエンドフレームワーク。
（開発を効率化するための枠組み）
・ライブラリは「部品」
・フレームワークは「設計」


上記参考記事：
https://udemy.benesse.co.jp/development/system/javascript-framework.html

＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝


＜Reactを学ぶ際に役立つ基本的な内容をタスク化。＞
<基礎編>　✅
1. Reactとは何か？
・Facebook社が開発したWebサイト上のUIを構築するためのJavaScriptライブラリ。
・動的なアプリのUIを構築
・主にボタンや入力フォームなどのUI部品を作成するために使用

欠点：
・日本語ドキュメントが少ない
・環境構築に時間がかかる

Reactの概念（コンポーネントベースのUIライブラリであることなど）を学びます。
・細かく分けられたコンポーネント（構成要素）を組み合わせてインターフェースを構築
・一度使ったコンポーネントは再利用して別のサイト・アプリケーションでも利用可能
・ユーザーの操作で頻繁に表示を変更するようなアプリケーションにおいては、仮想DOMによる軽快な動作がメリットとして作用
⇨今回のハッカソンではタイピングゲームなのでReactが良さそう
https://qiita.com/seira/items/6767e222890c9890ecb9 
https://and-engineer.com/articles/YclsBhAAACMAtlJ_


2. 環境設定　✅
①Node.jsのインストール
②Webstormのインストール(JetBrainsのReact開発用IDE)
③Create React Appを使ったReactプロジェクトのセットアップ。

3. JSXの基礎
JSXの構文とそれがどのようにJavaScriptに変換されるかを学びます。

4. コンポーネントとprops　✅
関数コンポーネントとクラスコンポーネントの作成方法。
propsを使ったデータの受け渡し。


5. ステート管理　✅
コンポーネントのstateの使い方。
useStateフックの基礎。

6. イベント処理　✅
ボタンクリックやフォームの送信などの基本的なイベント処理。

7. 条件付きレンダリング　✅
条件によって異なるコンポーネントを表示する方法。

8. リストとキー
リストを使ったデータのレンダリングと、キーを使った性能の最適化。


<応用編>
1. コンポーネントのライフサイクル
クラスコンポーネントのライフサイクルメソッド。
useEffectフックによるライフサイクルの管理。

2. フックの応用　✅
useEffect、useContext、useReducerなどのフックの使い方。

3. コンテキストAPI
コンテキストAPIを使ったグローバルな状態管理。

4. ルーティング
React Routerを使ったSPAのルーティング管理。

5. フォームの扱い
フォームの作成とバリデーション。

6. 外部APIの利用
fetchやaxiosを使った外部APIとの通信。

7. カスタムフックの作成
再利用可能なカスタムフックの作成方法。

8. パフォーマンス最適化
React.memo、useCallback、useMemoを使ったパフォーマンスの最適化。

9. Reactのエコシステム
ステート管理ライブラリ（ReduxやMobX）の基本。
スタイリング（CSS Modules、styled-components）。


<プロジェクト編> ✅
1. 簡単なアプリケーションの開発　
学んだ知識を活かして、簡単なTodoリストやブログアプリなどを作成します。 

参考youtube:
https://www.youtube.com/watch?v=nRCNL9T3J98 ✅
https://www.youtube.com/watch?v=uuAdVs7sbAs ✅
